dnl 'autoconf' input file for the LBL/UCB vic tool
dnl $Header$ (LBL)

AC_INIT(main.cpp)

AC_PROG_INSTALL

V_PROG="vic"
V_SHM="-DUSE_SHM"
V_PATH=`pwd`
V_OBJ=""
V_LIB=""
V_CODEC_LIB=""
V_DEFINE=""

#ARCH DETECTION
v_ARCH=""
arch=`uname -m`
case "$arch" in
  i386|i486|i586|i686|i86pc|BePC)
    V_ARCH="ARCH_X86"
  ;;
  x86_64|amd64)
    V_ARCH="ARCH_X86_64"
  ;;
  "Power Macintosh"|ppc|ppc64|powerpc)
    V_ARCH="ARCH_PPC"
    case "$target" in (*darwin*) V_DEFINE="$V_DEFINE -DSYS_DARWIN";; esac
    ffmpeg_conf="--disable-altivec"
    ppc_tune="-mcpu=G3"
    if sysctl hw.vectorunit 2>/dev/null | grep "hw.vectorunit: 1" >/dev/null 2>&1; then
    	ffmpeg_conf=""
    	ppc_tune="-mcpu=G4 -mtune=G4"
    fi
  ;;
esac

echo "Architecture             $V_ARCH"


builtin(include, configure.in.head)

#XXX
V_STATIC="-static"
V_LIB_GRABBER=""
V_INCLUDE_GRABBER=""
V_OBJ_GRABBER=""
V_LIB_XIL=""
V_OBJ_XIL=""
V_LIB_FFMPEG=""
V_LIB_X264=""
V_DDRAW=""

dnl Optimisation in H261 decoder needs to be turned off for GCC 2.96

AC_MSG_CHECKING([for buggy version of GCC-2.96])
if test $CC = gcc ; then
     if $CC --version | grep 2.96 >&/dev/null; then
           AC_MSG_RESULT([Yes - Turning off optimisation for dct code])
           V_CCOPT_H261="";
     else
           AC_MSG_RESULT(no)
     fi
fi

if test -f codec/encoder-bvc.cpp ; then
	V_OBJ="$V_OBJ codec/encoder-bvc.o codec/decoder-bvc.o"
fi

AC_ARG_WITH(aix-shm,	--with-aix-shm=path	specify a pathname for the AIX shm X extension library file, lib=$withval, lib="")
if test "$lib" != "" ; then
	if test ! -r $lib ; then
		echo "'$lib' does not exist"
		exit 1
	fi
	V_LIB_AIXSHM=$lib
else
	V_LIB_AIXSHM=""
fi

AC_ARG_WITH(qcam,	--with-qcam=dir     specify directory with qcam.h for Connectix QuickCam device driver, qcamdir=$withval, qcamdir="")
if test "$qcamdir" != "" -a ! -r $qcamdir/qcam.h ; then
	echo "'$dir/qcam.h' does not exist"
	exit 1
fi


V_DV=""
dnl dv decoding support
AC_ARG_ENABLE(dvdecode, --enable-dvdecode       Enable or disable dv decoding (default: disabled), dvdecode=yes, dvdecode=no)
if test "$dvdecode" = "yes"; then
   AC_CHECK_LIB([dv], [main], [], [
      echo "Error! libdv not available. Please install libdv."
      exit 1
      ])
   AC_CHECK_HEADERS([libdv/dv.h], [], [
      echo "Error! libdv/dv.h not found. Please install libdv developer package."
      exit 1
      ])
   V_OBJ="$V_OBJ codec/decoder-dv.o"
   V_DV="-DUSE_DVDECODER"
   V_LIB="$V_LIB -ldv"
fi

dnl xvideo rendering support
V_XV=""
AC_ARG_ENABLE(xvideo, --enable-xvideo		Enable or disable Xvideo rendering (default: disabled), xvideo=yes, xvideo=no)
if test "$xvideo" = "yes"; then

   dnl Look for the PIC library first, Debian requires it.
   AC_CHECK_LIB(Xv_pic, XvQueryExtension,
                 HAVE_XVIDEO="yes", HAVE_XVIDEO="no",
                 -lXext)
   if test $HAVE_XVIDEO = "yes"; then
	V_LIB="$V_LIB -lXv_pic"
        V_XV="-DHAVE_XVIDEO"
        V_OBJ="$V_OBJ render/xvideo.o"
   else
   dnl try again using something else if we didn't find it first

   	AC_CHECK_LIB(Xv, XvQueryExtension,
                HAVE_XVIDEO="yes", HAVE_XVIDEO="no",
                -lXext)

   	if test $HAVE_XVIDEO = "yes"; then
       	    V_XV="-DHAVE_XVIDEO"
       	    V_LIB="$V_LIB -lXv"
            V_OBJ="$V_OBJ render/xvideo.o"
   	fi
   fi

   if test $HAVE_XVIDEO = "yes"; then
   	AC_CHECK_HEADERS([X11/extensions/Xvlib.h], [], [
      	echo "Error! \"X11/extensions/Xvlib.h\" not found. Please install \"libxv-dev\" package."
      		exit 1
      	])
   fi
fi

dnl lots of hairy special cases for detecting which frame capture
dnl support to compile in

AC_MSG_NOTICE([checking for V4L support])
AC_CHECK_HEADER([linux/videodev.h],
	[ have_videodev_h=yes; ],
	[AC_CHECK_HEADER([/usr/local/include/linux/videodev.h],[ have_videodev_h=yes; ])])
if test x$have_videodev_h = xyes; then
        AC_MSG_NOTICE([suitable V4L support found... using linux/videodev.h])
        V_OBJ_GRABBER="$V_OBJ_GRABBER video/grabber-video4linux.o"
        have_V4L=yes
fi

AC_MSG_NOTICE([checking for V4L2 support])
AC_CHECK_HEADER([linux/videodev2.h], [ have_linux_videodev2_h=yes; ])
AC_CHECK_HEADER([sys/videodev2.h], [ have_sys_videodev2_h=yes; ])
AC_CHECK_HEADER([sys/videoio.h], [ have_sys_videoio_h=yes; ])

if test x$have_linux_videodev2_h = xyes ; then
        AC_MSG_NOTICE([suitable V4L2 support found... using linux/videodev2.h])
        V_DEFINE="$V_DEFINE -DHAVE_LINUX_VIDEODEV2_H"
        V_OBJ_GRABBER="$V_OBJ_GRABBER video/grabber-v4l2.o"
        have_V4L2=yes

elif test x$have_sys_videodev2_h = xyes; then
        AC_MSG_NOTICE([suitable V4L2 support found... using sys/videodev2.h])
        V_DEFINE="$V_DEFINE -DHAVE_SYS_VIDEODEV2_H"
        V_OBJ_GRABBER="$V_OBJ_GRABBER video/grabber-v4l2.o"
        have_V4L2=yes

elif test x$have_sys_videoio_h = xyes; then
        AC_MSG_NOTICE([suitable V4L2 support found... using sys/videoio.h])
        V_DEFINE="$V_DEFINE -DHAVE_SYS_VIDEOIO_H"
        V_OBJ_GRABBER="$V_OBJ_GRABBER video/grabber-v4l2.o"
        have_V4L2=yes

fi

if test x$have_V4L = xyes -o x$have_V4L2 = xyes; then
        V_OBJ_GRABBER="$V_OBJ_GRABBER video/yuv_convert.o"
fi

AC_CHECK_HEADER([libv4lconvert.h], [ have_libv4lconvert_h=yes; ])
if test x$have_libv4lconvert_h = xyes; then
        V_DEFINE="$V_DEFINE -DHAVE_LIBV4L"
        if test x$have_V4L = xyes; then
                V_LIB_GRABBER="$V_LIB_GRABBER -lv4l1"
        fi
        if test x$have_V4L2 = xyes; then
                V_LIB_GRABBER="$V_LIB_GRABBER -lv4l2"
        fi
else
        V_OBJ_GRABBER="$V_OBJ_GRABBER  video/tinyjpeg.o video/jidctflt.o"
fi

AC_ARG_WITH(decklink,--with-decklink=dir     specify directory containing DeckLinkAPIDispatch.cpp, with_decklinkapidispatch=${withval})
AC_MSG_NOTICE([checking for Blackmagic DeckLink SDK])
AC_CACHE_VAL(ac_cv_c_decklinkapidispatch,[
        # First check to see if --with-decklink was specified.
        if test x"${with_decklinkapidispatch}" != x ; then
                case ${with_decklinkapidispatch} in
                */DeckLinkAPIDispatch.cpp )
                        if test -f ${with_decklinkapidispatch}; then
                                AC_MSG_WARN([--with-decklink argument should refer to directory containing DeckLinkAPIDispatch.cpp, not to DeckLinkAPIDispatch.cpp itself])
                                with_decklinkapidispatch=`echo ${with_decklinkapidispatch} | sed 's!/DeckLinkAPIDispatch\.cpp!!'`
                        fi ;;
                esac
                if test -f "${with_decklinkapidispatch}/DeckLinkAPIDispatch.cpp" ; then
                    ac_cv_c_decklinkapidispatch=`(cd ${with_decklinkapidispatch}; pwd)`
                else
                    AC_MSG_ERROR([${with_decklinkapidispatch} directory doesn't contain DeckLinkAPIDispatch.cpp])
                fi
        fi

        # then check for a private Blackmagic DeckLink SDK installation
        if test x"${ac_cv_c_decklinkapidispatch}" = x ; then
		as_save_IFS=$IFS
		IFS=`echo`
                for i in \
                        `ls -dr "Blackmagic DeckLink SDK "[[0-9]]* 2>/dev/null` \
                        `ls -dr ../"Blackmagic DeckLink SDK "[[0-9]]* 2>/dev/null` \
                        `ls -dr $HOME/"Blackmagic DeckLink SDK "[[0-9]]* 2>/dev/null` \
                        `ls -dr $HOME/Downloads/"Blackmagic DeckLink SDK "[[0-9]]* 2>/dev/null` \
                        `ls -dr /usr/local/"Blackmagic DeckLink SDK "[[0-9]]* 2>/dev/null` \
                        `ls -dr /opt/local/"Blackmagic DeckLink SDK "[[0-9]]* 2>/dev/null` ; do
                        case "$target" in
                        *linux* )
                                if test -f "$i/Linux/include/DeckLinkAPIDispatch.cpp" ; then
                                        ac_cv_c_decklinkapidispatch=`(cd "$i/Linux/include"; pwd)`
                                        break
                                fi ;;
                        *darwin* )
                                if test -f "$i/Mac/include/DeckLinkAPIDispatch.cpp" ; then
                                        ac_cv_c_decklinkapidispatch=`(cd "$i/Mac/include"; pwd)`
                                        break
                                fi ;;
                        esac
                done
		IFS=$as_save_IFS
        fi
])
if test x"${ac_cv_c_decklinkapidispatch}" = x ; then
	AC_MSG_WARN([no DeckLinkAPIDispatch.cpp file found])
else
	AC_MSG_RESULT([found ${ac_cv_c_decklinkapidispatch}/DeckLinkAPIDispatch.cpp])
	V_INCLUDE="$V_INCLUDE -I\"${ac_cv_c_decklinkapidispatch}\""
	V_OBJ_GRABBER="$V_OBJ_GRABBER video/grabber-decklink.o"

	AC_CHECK_LIB(dl, dlsym, [V_LIB="$V_LIB -ldl"])
fi

if test -r /usr/lib/libvl.so ; then
	V_LIB_GRABBER="$V_LIB_GRABBER -lvl -ldmedia"
	V_OBJ_GRABBER="video/grabber-vl.o video/output-vl.o $V_OBJ_GRABBER"
	if test -r /usr/include/dmedia/cl_cosmo.h  ; then
		V_LIB_GRABBER="$V_LIB_GRABBER -lcl"
		V_OBJ_GRABBER="video/grabber-cosmo.o $V_OBJ_GRABBER"
	fi
fi
if test -r /usr/lib/libsvideo.a ; then
	V_LIB_GRABBER="$V_LIB_GRABBER -lsvideo"
	V_OBJ_GRABBER="video/grabber-svideo.o $V_OBJ_GRABBER"
fi

AC_ARG_ENABLE(XvGrabber,--enable-XvGrabber    Enable or disable old XvGrabber (default: disabled), XvGrabber=yes, XvGrabber=no)
if test -r /usr/lib/libXv.a -a "$XvGrabber" = "yes" ; then
	V_LIB_GRABBER="$V_LIB_GRABBER -lXv"
	V_DEFINE="$V_DEFINE -DXV_PSEUDO8"
	V_OBJ_GRABBER="video/grabber-xv.o $V_OBJ_GRABBER"
fi
if test -r /usr/lpp/parallax/lib/libXvid.a ; then
    V_LIB_GRABBER="$V_LIB_GRABBER -L/usr/lpp/parallax/lib -lXvid -lXv"
    V_INCLUDE_GRABBER="$V_INCLUDE_GRABBER -I/usr/lpp/parallax/include"
    V_OBJ_GRABBER="video/grabber-plx.o video/assistor-plx.o $V_OBJ_GRABBER"
fi
if test -r /usr/lpp/UMS6000/lib/libUMSobj.a ; then
	V_LIB_GRABBER="$V_LIB_GRABBER -L/usr/lpp/UMS6000/lib -lUMSobj"
	V_INCLUDE_GRABBER="$V_INCLUDE_GRABBER -I/usr/lpp/UMS6000/include"
	V_DEFINE="$V_DEFINE -DSUNRISE"
	V_OBJ_GRABBER="video/grabber-sunrise.o video/output-sunrise.o $V_OBJ_GRABBER"
fi

if test -r /usr/include/machine/ioctl_meteor.h -o \
    -r /usr/include/dev/ic/bt8xx.h ; then
	V_OBJ_GRABBER="video/grabber-meteor.o $V_OBJ_GRABBER"
fi

AC_ARG_ENABLE(Linux1394Grabber,--enable-Linux1394Grabber    Enable or disable Linux1394XvGrabber (default: disabled), Linux1394Grabber=yes, Linux1394Grabber=no)
if test -r /usr/include/libdc1394/dc1394_control.h -a -r /usr/include/libraw1394/raw1394.h -a "$Linux1394Grabber" = "yes"; then
      V_OBJ_GRABBER="$V_OBJ_GRABBER video/grabber-linux1394.o"
      V_LIB_GRABBER="$V_LIB_GRABBER -lraw1394 -ldc1394_control"
fi

#if test -r /usr/local/lib/libspigot.a -a ${PORTOBJFORMAT} != elf; then
if test -r /usr/local/lib/libspigot.a ; then
	V_OBJ_GRABBER="video/grabber-spigot.o $V_OBJ_GRABBER"
	V_LIB_GRABBER="$V_LIB_GRABBER -lspigot"
	V_INCLUDE_GRABBER="$V_INCLUDE_GRABBER -I/usr/local/include"
fi

if test "$qcamdir" != "" ; then
	V_OBJ_GRABBER="video/grabber-qcam.o $V_OBJ_GRABBER"
	V_INCLUDE_GRABBER="$V_INCLUDE_GRABBER -I$qcamdir"
	V_DEFINE="$V_DEFINE -DQCAMDEV -DQCAMDOTH=qcam.h"
elif test -r /usr/local/lib/libqcam.a ; then
	V_OBJ_GRABBER="video/grabber-qcam.o $V_OBJ_GRABBER"
	V_LIB_GRABBER="$V_LIB_GRABBER -lqcam"
	V_INCLUDE_GRABBER="$V_INCLUDE_GRABBER -I/usr/local/include"
	V_DEFINE="$V_DEFINE -DQCAMLIB"
elif test -r /dev/qcam0 ; then
	V_OBJ_GRABBER="video/grabber-qcam.o $V_OBJ_GRABBER"
	V_DEFINE="$V_DEFINE -DQCAMDEV"
fi
vpix_dir=/usr/src/local/vfc-1.0
vpix_lib=$vpix_dir/vfc_lib
if test -d /import/VideoPix ; then
	vpix_dir=/import/VideoPix
	vpic_lib=$vpix_dir/lib
fi
if test -d $vpix_dir ; then
	V_INCLUDE_GRABBER="$V_INCLUDE_GRABBER -I$vpix_dir/sys -I$vpix_lib"
	V_LIB_GRABBER="$V_LIB_GRABBER $vpix_lib/libvfc.a"
	V_DEFINE="$V_DEFINE -DVIDEOPIX"
	V_OBJ_GRABBER="video/grabber-vpix.o $V_OBJ_GRABBER"
fi
places="/usr/src/local/vigrapix/lib \
	/opt/VIGRAvigrapix/lib"
for dir in $places; do
	if test -d $dir ; then
		V_INCLUDE_GRABBER="$V_INCLUDE_GRABBER -I$dir"
		V_LIB_GRABBER="$V_LIB_GRABBER $dir/libvigrapix.a"
		V_OBJ_GRABBER="video/grabber-vigra.o $V_OBJ_GRABBER"
		break
	fi
done

d=/opt/MMACslv
if test -d $d ; then
	V_INCLUDE_GRABBER="$V_INCLUDE_GRABBER -I$d/include"
	V_LIB_GRABBER="$V_LIB_GRABBER $d/lib/libslv.a -lintl"
	V_OBJ_GRABBER="video/grabber-slv.o $V_OBJ_GRABBER"
fi

d=/usr/include/mme
if test -d $d ; then
	V_INCLUDE_GRABBER="$V_INCLUDE_GRABBER -I$d"
	V_LIB_GRABBER="$V_LIB_GRABBER -lmme"
	V_OBJ_GRABBER="video/grabber-mme.o $V_OBJ_GRABBER"
fi

places="/opt/parallax \
	/usr/src/local/parallax \
	/usr/local/parallax \
	/usr/local/parallax/components/Xclients_sun4.ow3_1.18 \
	/usr/src/local/parallax/components/Xclients_sun4.ow3_1.18"
for dir in $places; do
	if test -d $dir/include ; then
		V_INCLUDE_GRABBER="$V_INCLUDE_GRABBER -I$dir/include"
		V_LIB_GRABBER="$V_LIB_GRABBER -L$dir/lib -lXext -lXvid"
		V_OBJ_GRABBER="video/grabber-plx.o video/assistor-plx.o $V_OBJ_GRABBER"
		break
	fi
done

case "$target" in
*-dec-*)
	jv_dir=jv2
	V_INCLUDE_GRABBER="$V_INCLUDE_GRABBER -I$jv_dir"
	V_LIB_GRABBER="$V_LIB_GRABBER $jv_dir/jvdriverint.o"
	V_OBJ_GRABBER="video/assistor-jv.o video/grabber-jv.o $V_OBJ_GRABBER"
	if test "$target_os" = ultrix4.3 ; then
		#XXX rtip code currently broken
		#V_DEFINE="$V_DEFINE -DRTIP"
		#V_LIB="$V_LIB lib.ultrix/librcap.a"
		#V_INCLUDE="$V_INCLUDE -Ircap-include"
		#XXX
		#V_OBJ_GRABBER="$V_OBJ_GRABBER net-rtip.o"
		echo no rtip support
	fi
	;;
sparc-sun-solaris*)
	V_STATIC=""
	have_xil=no
	xil_dir=/usr/openwin
	if test -d $xil_dir ; then
		if test ! -d $xil_dir/include/xil ; then
			echo "You don't have the XIL developer's kit!"
			echo "Building without XIL support..."
		else
			echo "Using XIL developer's kit (Found in: $xil_dir/include/xil)"
			have_xil=yes
		fi
	fi
	SYSINC="-I"
	if test $CC = gcc ; then
		V_DEFINE="$V_DEFINE -mv8 -msupersparc"
		SYSINC="-isystem "
	elif  test -z "$enable_debug" ; then
		V_CCOPT="-xO2";
	fi
	if test $ipv6 = yes; then
		V_DEFINE="$V_DEFINE -D__svr4__ -DSolaris -DHAVE_IPV6 -DSOLARIS7_IPV6"
	else
		V_DEFINE="$V_DEFINE -D__svr4__ -DSolaris"
	fi
	OPSYS=solaris
	if test -f video/grabber-rtvc.cpp || test -f video/grabber-rtvc.o ; then
		V_OBJ_GRABBER="video/grabber-rtvc.o $V_OBJ_GRABBER"
		if test "$have_xil" = yes ; then
			V_PROG="vic vic.xil"
			V_INCLUDE_GRABBER="$V_INCLUDE_GRABBER $SYSINC$xil_dir/include -DSUNXIL_WARNING_DISABLE"
			V_LIB_XIL="-L$xil_dir/lib -R\"$xil_dir/lib:/opt/SUNWo1kp/lib:/opt/MMACo1k/lib\" -lxil"
			V_OBJ_XIL="video/grabber-xil.o codec/framer-h261hw.o codec/framer-cellb.o video/assistor-xil.o"
		fi
	elif test "$have_xil" = yes ; then
		V_OBJ_XIL="video/grabber-xil.o codec/framer-h261hw.o codec/framer-cellb.o video/assistor-xil.o"
		V_INCLUDE_GRABBER="$V_INCLUDE_GRABBER -I$xil_dir/include"
		V_LIB_GRABBER="$V_LIB_GRABBER -L$xil_dir/lib -R\"$xil_dir/lib:/opt/SUNWo1kp/lib:/opt/MMACo1k/lib\" -lxil "
	fi
	;;
sparc-sun-sunos*)
	V_DEFINE="$V_DEFINE -DNEED_SUNOS_PROTOS -DSunOS"
	;;
*-sgi-irix*)
	V_DEFINE="$V_DEFINE -D_BSD_SIGNALS -DIRIX"
	OPSYS=irix
	if test "$target_os" = irix6.2 ; then
		V_DEFINE="$V_DEFINE -DIRIX6_2 -DSIGARGS=__sigargs"
	fi
	V_TARCMD="tar cfL"
	V_SHELL="SHELL = /bin/sh"
	if test $CC != gcc ; then
		V_DEFINE="$V_DEFINE -signed -g3"
		CC="cc -Dinline="
		if test "$target_os" = irix5.2 ; then
			CC="$CC -xansi -D__STDC__"
		fi
		CXX="CC +p -float -woff 3262 -DSGI_COMPAT"
	else
		CXX=$CC
	fi
	V_STATIC=""
	;;
*-*-bsdi1*)
	V_SHM=""
	V_TARCMD="tar cfL"
	;;
*-*-bsdi2.0*)
	V_SHM=""
	V_TARCMD="tar cfL"
	;;
*-*-bsdi*)
	# bsdi2.1 added sys-v shared memory support but their implementation
	# is broken so we have to turn it off.  If they ever fix libipc,
	# the following line should be deleted.
	V_SHM=""
	V_TARCMD="tar cfL"
	V_CCOPT="-O2 -m486"
	V_LIB="$V_LIB -lipc"
	;;
*-*-netbsd*)
	if test "$gpl" = "yes" ; then
		V_OBJ_GRABBER="video/grabber-ov511.o $V_OBJ_GRABBER"
	fi
	V_DEFINE="$V_DEFINE -DNetBSD"
	V_STATIC=""
	V_TARCMD="tar -h -c -f"
	OPSYS=netbsd
	;;
*-*-openbsd*)
	if test "$gpl" = "yes" ; then
		V_OBJ_GRABBER="video/grabber-ov511.o $V_OBJ_GRABBER"
	fi
	V_DEFINE="$V_DEFINE -DOpenBSD"
	V_STATIC=""
	V_TARCMD="tar -h -c -f"
	OPSYS=openbsd
	;;
*-*-freebsd*)
	if test "$gpl" = "yes" ; then
		V_OBJ_GRABBER="video/grabber-ov511.o $V_OBJ_GRABBER"
	fi
	V_STATIC=""
	V_DEFINE="$V_DEFINE -DSIGARGS=int -DFreeBSD"
	if test $ipv6 = yes; then
		V_DEFINE="$V_DEFINE -DHAVE_IPV6"
		V_LIB="$V_LIB -L/usr/local/v6/lib"
	fi
	OPSYS=freebsd
	;;
*-*-hpux*)
	V_CCOPT="-O -DHPUX"
	OPSYS=hpux
	;;
*-*-aix3*)
	V_STATIC=""
	V_DEFINE="$V_DEFINE -DSIGARGS=int -DHPUX"
	if test "$V_LIB_AIXSHM" != "" ; then
		V_LIB="$V_LIB $V_LIB_AIXSHM"
	else
		V_SHM=""
	fi
	CXX="xlC -+"
	;;
*-*-aix4*)
	V_STATIC=""
	V_DEFINE="$V_DEFINE -DSIGARGS=int -D_AIX41"
	if test "$V_LIB_AIXSHM" != "" ; then
		V_LIB="$V_LIB $V_LIB_AIXSHM"
	else
		V_SHM=""
	fi
	CXX="xlC -+"
	;;
armv4l-*-linux)
	V_STATIC=""
	V_BROKEN_OBJ=
	CC=arm-linux-gcc
	CPP=arm-linux-g++
	AR=arm-linux-ar
	RANLIB=arm-linux-ranlib
	if test $ipv6 = yes; then
		V_DEFINE="$V_DEFINE -DLinux -DHAVE_IPV6 -DLINUX_IPV6"
	else
		V_DEFINE="$V_DEFINE -DLinux"
	fi
	OPSYS=linux
	;;
*-*-linux*)
	V_STATIC=""
	V_BROKEN_OBJ=
	if test $ipv6 = yes; then
		V_DEFINE="$V_DEFINE -DLinux -DHAVE_IPV6 -DLINUX_IPV6"
	else
		V_DEFINE="$V_DEFINE -DLinux"
	fi
	OPSYS=linux
        ;;
*darwin*)
        V_SHM=""
        V_STATIC=""
        V_BROKEN_OBJ=
        V_DEFINE="$V_DEFINE -DHAVE_IPV6 -DHAVE_FAST_INT"
        V_LIB="$V_LIB -framework Carbon -framework QuickTime"
        if test "$target_cpu" = powerpc; then
            V_CCOPT="-O2 $ppc_tune"
        fi
dnl Check for 64-bit host gcc - in Snow Leopard+
        AC_MSG_CHECKING([for 64-bit gcc on OSX])
	if gcc -v 2>&1 | grep host=x86_64 >& /dev/null ; then
dnl Check for lack of 64-bit support in QuickTime - an issue in Snow Leopard+
	   if ! file -L  /System/Library/Frameworks/QuickTime.framework/QuickTime 2>&1 | grep x86_64 >&/dev/null; then
              AC_MSG_RESULT([Yes but forcing 32-bit due to QuickTime])
dnl If gcc 32bit then we need to set following flags for compilation of ffmpeg and x264
dnl The MacOSX10.6 SDK is the last SDK that contain QuickTime header files capable of building video/grabber-macosx.cpp
              x264_conf="$x264_conf --host=i686-apple-darwin"
              if [[ -d /Developer/SDKs/MacOSX10.4u.sdk ]] ; then
                 V_LDFLAGS="$V_LDFLAGS -arch i386  -mmacosx-version-min=10.4"
                 V_CCLDFLAGS32="LDFLAGS='-arch i386 -mmacosx-version-min=10.4' CFLAGS='-arch i386'"
                 V_CCOPT="$V_CCOPT -arch i386"
              elif [[ -d /Developer/SDKs/MacOSX10.5.sdk ]] ; then
                 V_LDFLAGS="$V_LDFLAGS -arch i386  -mmacosx-version-min=10.5"
                 V_CCLDFLAGS32="LDFLAGS='-arch i386 -mmacosx-version-min=10.5' CFLAGS='-arch i386'"
                 V_CCOPT="$V_CCOPT -arch i386"
              elif [[ -d /Developer/SDKs/MacOSX10.6.sdk ]] ; then
                 V_LDFLAGS="$V_LDFLAGS -arch i386  -mmacosx-version-min=10.6"
                 V_CCLDFLAGS32="LDFLAGS='-arch i386 -mmacosx-version-min=10.6' CFLAGS='-arch i386'"
                 V_CCOPT="$V_CCOPT -arch i386 -isysroot /Developer/SDKs/MacOSX10.6.sdk"
              else
                 AC_MSG_RESULT([No suitable SDK under /Developer/SDKs/ found for building with QuickTime framework])
              fi
	   fi
	else
              AC_MSG_RESULT([No - using 32-bit])
	fi
        OPSYS=macosx
        V_OBJ_GRABBER="$V_OBJ_GRABBER video/grabber-macosx.o video/yuv_convert.o"
        ;;
*mingw*|*mingw32*)
        V_SHM=""
		AC_CHECK_LIB(ws2_32, _head_libws2_32_a, ws2="yes", ws2="no")
		if test "$ws2" == "yes"; then
		    LIBS="$LIBS -lws2_32"
		else
		    AC_CHECK_LIB(wsock32, socket, ws1="yes", ws1="no")
			if test "$ws1" == "yes"; then
			    LIBS="$LIBS -lwsock32"
			else
			    AC_MSG_ERROR([Winsock library not found!])
			fi
		fi
		LIBS="$LIBS -liphlpapi -lvfw32 -lgdi32 -lole32 -loleaut32 -luuid -lcomctl32 -lcomdlg32 -limm32"
		V_DEFINE="$V_DEFINE -DSTATIC_BUILD -DWIN32 -D_WINDOWS -DHAVE_SWSCALE -DHAVE_STDLIB_H -DSASR -D_CRT_SECURE_NO_DEPRECATE -D_CRT_NONSTDC_NO_DEPRECATE -D_WIN32_WINNT=_WIN32_WINNT_WINXP"
		V_EXTRAC_OBJ="$V_EXTRAC_OBJ win32/win32.o getopt.o"
		V_OBJ_GRABBER="$V_OBJ_GRABBER video/grabber-win32.o video/yuv_convert.o"
		V_OBJ_GRABBER="$V_OBJ_GRABBER video/grabber-win32DS.o video/crossbar.o"
		V_OBJ_GRABBER="$V_OBJ_GRABBER video/grabber-decklink.o video/DeckLinkAPI_i.o"
		V_LIB_GRABBER="$V_LIB_GRABBER dx9/Lib/x86/ddraw.lib dx9/Lib/x86/dxguid.lib dx9/Extras/DirectShow/Lib/x86/strmiids.lib dx9/Extras/DirectShow/Lib/x86/quartz.lib"
		V_INCLUDE_GRABBER="$V_INCLUDE_GRABBER -Idx9/Include -Idx9/Extras/DirectShow/Include"
		ffmpeg_conf="$ffmpeg_conf --enable-memalign-hack --enable-w32threads"
		x264_conf="$x264_conf --disable-avis-input --disable-pthread"
		AC_ARG_ENABLE(ddraw, --enable-ddraw        Enable or disable DirectDraw, ddraw="yes", ddraw="no")
		if test "$ddraw" == "yes"; then
		    V_DDRAW="-DUSE_DDRAW"
			echo "Using DirectDraw"
		fi;
		V_PROG="vic.exe"
		V_CCOPT="$V_CCOPT -Wl,-subsystem,windows"
		;;
esac

case "$target" in
*-*-darwin* | *-*-mingw* | *-*-cygwin* | *-*-pw32*)
        ;;
*)
        V_OBJ_GRABBER="$V_OBJ_GRABBER video/grabber-x11.o"
        ;;
esac

AC_ARG_ENABLE(gpl,	--enable-gpl	Enable or disable  use of gpl functionality - H264 MPEG4 Swscale, gpl="yes", gpl="no")
if test "$gpl" = "yes" ; then
  V_DEFINE="$V_DEFINE -DHAVE_SWSCALE"
  V_OBJ="$V_OBJ codec/packetbuffer.o codec/databuffer.o \
    codec/ffmpeg_codec.o codec/encoder-mpeg4.o codec/decoder-mpeg4.o \
    codec/x264encoder.o codec/encoder-h264.o codec/decoder-h264.o \
    codec/rtp_h264_depayloader.o render/color-swscale.o video/deinterlace.o"
else
  V_OBJ="$V_OBJ render/color-true.o  render/color-hi.o"
fi

AC_CHECK_PROG(DOWNLOAD, wget, [wget -q -O -])
AC_CHECK_PROG(DOWNLOAD, curl, [curl -s])

havex264="no"
AC_ARG_WITH(ffmpegver,       --with-ffmpegver=ffmpeg-version     specify the version of ffmpeg to download and build, ffmpegver=$withval, ffmpegver=ffmpeg-0.5.8)
AC_ARG_ENABLE(ffmpeg-co,	--disable-ffmpeg-co	Enable or disable ffmpeg download, ffmpegco="no", ffmpegco="yes")
if test "$ffmpegco" = "yes" ; then
  if test "$gpl" = "yes" ; then
   if test ! -d ${ffmpegver} ; then
      echo "Downloading ${ffmpegver} of ffmpeg from ffmpeg.org ..."
      ${DOWNLOAD} http://ffmpeg.org/releases/${ffmpegver}.tar.bz2 | tar xjf - && ln -sf ${ffmpegver} ffmpeg
   fi
   patch --dry-run -sf -p0 < ffmpeg.iocom.patch >& /dev/null
   if test $? = 0; then
      echo "Patching ffmpeg h264 for IOCOM decode compatibility..."
      patch -p0 < ffmpeg.iocom.patch
   else
      echo "ffmpeg has already been patched for IOCOM decode compatibility"
   fi
   echo "Configuring ffmpeg..."
   echo "${V_CCLDFLAGS32} ./configure --prefix=$V_PATH/ffmpeg $ffmpeg_conf --enable-gpl --enable-swscale --enable-postproc"
   cd ffmpeg && eval ${V_CCLDFLAGS32} ./configure --prefix=$V_PATH/ffmpeg $ffmpeg_conf --enable-gpl --enable-swscale --enable-postproc; cd ..
   V_INCLUDE="$V_INCLUDE -Iffmpeg/include -Iffmpeg"
   V_CODEC_LIB="$V_CODEC_LIB -Lffmpeg/lib -lavcodec -lavutil -lswscale -lpostproc "
  else
   echo "ffmpeg not available without --enable-gpl"
  fi
fi

AC_ARG_WITH(x264ver,       --with-x264ver=x264ver-version     specify the version of x264 to download and build, x264ver=$withval, x264ver=x264-snapshot-20100805-2245)
AC_ARG_ENABLE(x264-co,        --disable-x264-co      Enable or disable x264 download, x264co="no", x264co="yes")
if test "$x264co" = "yes" ; then
  if test "$gpl" = "yes" ; then
   if test ! -d "x264" ; then
     echo "Downloading ${x264ver} of x264 from videolan.org ..."
     ${DOWNLOAD} http://downloads.videolan.org/pub/videolan/x264/snapshots/${x264ver}.tar.bz2 | tar xjf - && ln -sf ${x264ver} x264
   fi
   echo;echo "Configuring x264..."
   echo "${V_CCLDFLAGS32} ./configure --prefix=$V_PATH/x264 $x264_conf"
   cd x264 && eval ${V_CCLDFLAGS32} ./configure --prefix=$V_PATH/x264 $x264_conf; cd ..
   V_INCLUDE="$V_INCLUDE -Ix264/include"
   V_CODEC_LIB="$V_CODEC_LIB -Lx264/lib -lx264"
   havex264="yes"
  else
   echo "x264 not available without --enable-gpl"
  fi
fi

AC_ARG_WITH(ffmpeginc,       --with-ffmpeginc=dir     specify the prefix directory of ffmpeg header, ffmpeginc=$withval, ffmpeginc="")
AC_ARG_WITH(ffmpeglib,       --with-ffmpeglib=dir     specify the directory of ffmpeg library, ffmpeglib=$withval, ffmpeglib="")

if test "$gpl" = "yes" ; then
  if test "$ffmpegco" != "yes"; then

	if test "$ffmpeginc" != "" ; then
	   if test ! -r $ffmpeginc/libavcodec/avcodec.h ; then
	        echo "Error! you need to have $ffmpeginc/ffmpeg/avcodec.h around"
	        exit 1
	   elif test ! -r $ffmpeginc/libavutil/avutil.h ; then
	        echo "Error! you need to have $ffmpeginc/ffmpeg/avutil.h around"
	        exit 1
	   elif test ! -r $ffmpeginc/libswscale/swscale.h ; then
	        echo "Error! you need to have $ffmpeginc/ffmpeg/swscale.h around"
	        exit 1
	   fi
	   echo "checking for FFmpeg headers...yes"
	   V_INCLUDE="$V_INCLUDE -I$ffmpeginc"

	else

	   AC_CHECK_HEADER(libavcodec/avcodec.h, [], [
        	echo "Error! you need to have avcodec.h around."
	        exit -1
	   ])
	   AC_CHECK_HEADER(libavutil/avutil.h, [], [
	        echo "Error! you need to have avutil.h around."
	        exit -1
	   ])
	   AC_CHECK_HEADER(libswscale/swscale.h, [], [
	        echo "Error! you need to have swscale.h around."
	        exit -1
	   ])
	fi

	if test "$ffmpeglib" != "" ; then
	   if test ! -r $ffmpeglib/libavcodec.a ; then
		    echo "Error! you need to have $ffmpeglib/libavcodec.a around"
	   elif test ! -r $ffmpeglib/libavutil.a ; then
	        echo "Error! you need to have $ffmpeglib/libavutil.a around"
	   elif test ! -r $ffmpeglib/libswscale.a ; then
	        echo "Error! you need to have $ffmpeglib/libswscale.a around"
       elif test ! -r $ffmpeglib/libpostproc.a ; then
            echo "Error! you need to have $ffmpeglib/libpostproc.a around"
       fi

	   V_CODEC_LIB="$V_CODEC_LIB -L$ffmpeglib -lavcodec -lavutil -lswscale -lpostproc"
	else
	   AC_CHECK_LIB(avcodec, main, [], [
	        echo "Error! you need to have libavcodec around."
	        exit -1
	   ])
	   AC_CHECK_LIB(avutil, main, [], [
	        echo "Error! you need to have libavutil around."
	        exit -1
	   ])
	   AC_CHECK_LIB(swscale, main, [], [
	        echo "Error! you need to have libswscale around."
	        exit -1
	   ])

	   AC_CHECK_LIB(postproc, main, [], [
			echo "Error! you need to have libpostproc around."
			exit -1
	   ])

	   V_CODEC_LIB="$V_CODEC_LIB -lavcodec -lavutil -lswscale -lpostproc"
	fi
  fi
fi

AC_ARG_WITH(x264inc,       --with-x264inc=dir     specify the directory of x264 header, x264inc=$withval, x264inc="")
AC_ARG_WITH(x264lib,       --with-x264lib=dir     specify the directory of x264 library, x264lib=$withval, x264lib="")
if test "$gpl" = "yes" ; then
  if test "$x264co" != "yes" ; then
	if test "$x264inc" != "" ; then
	   if test ! -r $x264inc/x264.h ; then
	        echo "Error! you need to have $x264inc/x264.h around."
	        exit 1
	   fi
	   V_INCLUDE="$V_INCLUDE -I$x264inc"
	elif test ! -r /usr/local/include/x264.h -a ! -r /usr/include/x264.h ; then
	        echo "Error! you need to have x264.h around."
	        exit 1
	else
	   echo "checking for x264.h...yes"
	fi

	if test "$x264lib" != "" ; then
	   if test ! -r $x264lib/libx264.a ; then
	        echo "Error! you need to have $x264lib/libx264.a around"
		exit 1
	   fi
	   V_CODEC_LIB="$V_CODEC_LIB -L$x264lib -lx264"
	else
	   AC_CHECK_LIB(x264, main, [], [
	        echo "Error! you need to have libx264 around."
	        exit -1
	   ])
	   V_CODEC_LIB="$V_CODEC_LIB -lx264"
	fi
	havex264="yes"
 fi
fi

if test "$havex264" == "yes"; then
    AC_CHECK_LIB(pthread, pthread_create, pthread="yes", pthread="no")
	if test "$pthread" == "yes"; then
	    V_CODEC_LIB="$V_CODEC_LIB -lpthread"
	else
	    AC_CHECK_LIB(pthreadGC2, pthread_create, pthreadGC2="yes", pthreadGC2="no")
		if test "$pthreadGC2" == "yes"; then
		    V_CODEC_LIB="$V_CODEC_LIB -lpthreadGC2"
			V_DEFINE="$V_DEFINE -DPTW32_STATIC_LIB"
		fi
	fi
fi

V_CPUDETECT=""
AC_ARG_ENABLE(cpudetect, --disable-cpudetect     Enable or disable runtime cpu detection, cpudetect="no", cpudetect="yes")
if test "$gpl" = "yes" ; then
 if test "$cpudetect" = "yes"; then
    echo "Using CPU runtime detection..."
    V_CPUDETECT="-DRUNTIME_CPUDETECT"
    V_CPUDETECT_OBJ="cpu/cpudetect.o cpu/cpuid.o"
 fi
 else
   echo "No runtime cputect without --enable-gpl"
fi

AC_SUBST(V_LIB_FFMPEG)
AC_SUBST(V_LIB_X264)
AC_SUBST(V_INCLUDE_GRABBER)
AC_SUBST(V_LIB_GRABBER)
AC_SUBST(V_OBJ_GRABBER)
AC_SUBST(V_LIB_XIL)
AC_SUBST(V_OBJ_XIL)
AC_SUBST(V_OBJ)
AC_SUBST(V_LIB)
AC_SUBST(V_CODEC_LIB)
AC_SUBST(V_CPUDETECT_OBJ)
AC_SUBST(V_PROG)

V_DEFINE="$V_DEFINE $V_SHM $V_ZVFS $V_DDRAW $V_DV $V_XV $V_CPUDETECT -D$V_ARCH "

builtin(include, configure.in.tail)
